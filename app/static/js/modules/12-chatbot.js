/**
 * ==================== CHATBOT H·ªñ TR·ª¢ KH√ÅCH H√ÄNG ====================
 * File: 12-chatbot.js
 * T·∫°o t·ª± ƒë·ªông t·ª´: main.js
 * Ng√†y t·∫°o: 29/10/2025 19:18:29
 * ==========================================================================
 * 

        üìç V·ªã tr√≠: G√≥c ph·∫£i d∆∞·ªõi m√†n h√¨nh (tr√™n scroll-to-top)
        üéØ Ch·ª©c nƒÉng: Chatbot AI h·ªó tr·ª£ kh√°ch h√†ng 24/7
        üìÑ S·ª≠ d·ª•ng t·∫°i:
           - layouts/base.html (id="chatbotButton", id="chatbotWidget")
           - components/chatbot.html
           - CSS: 26-chatbot.css
           - Backend: app/chatbot/routes.py
        üîß C√°c t√≠nh nƒÉng:
           - ‚úÖ FULL SCREEN MOBILE: Chi·∫øm to√†n m√†n h√¨nh tr√™n mobile
           - ‚úÖ NO AUTO-FOCUS: Kh√¥ng t·ª± ƒë·ªông m·ªü b√†n ph√≠m
           - ‚úÖ BODY SCROLL LOCK: Kh√≥a scroll body khi m·ªü (iOS fix)
           - ‚úÖ TYPING INDICATOR: Hi·ªáu ·ª©ng "ƒëang g√µ..." khi bot tr·∫£ l·ªùi
           - ‚úÖ AUTO SCROLL: T·ª± ƒë·ªông scroll xu·ªëng tin nh·∫Øn m·ªõi
           - ‚úÖ REQUEST LIMIT: Hi·ªÉn th·ªã s·ªë tin nh·∫Øn c√≤n l·∫°i (20/session)
           - ‚úÖ RESET CHAT: N√∫t l√†m m·ªõi h·ªôi tho·∫°i
           - ‚úÖ ERROR HANDLING: X·ª≠ l√Ω l·ªói m·∫°ng, server
           - ‚úÖ INPUT VALIDATION: Gi·ªõi h·∫°n 500 k√Ω t·ª±
           - ‚úÖ ESCAPE HTML: B·∫£o m·∫≠t XSS
        üåê API Endpoints:
           - POST /chatbot/send ‚Üí G·ª≠i tin nh·∫Øn
           - POST /chatbot/reset ‚Üí Reset session
        üí° D√πng Flask session ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
        
 * ==========================================================================
 */

// ==================== Chatbot Widget ====================
class ChatbotWidget {
    constructor() {
        this.isOpen = false;
        this.isTyping = false;
        this.remainingRequests = 20;

        // DOM elements
        this.chatButton = document.getElementById('chatbotButton');
        this.chatWidget = document.getElementById('chatbotWidget');
        this.closeBtn = document.getElementById('chatbotCloseBtn');
        this.messagesContainer = document.getElementById('chatbotMessages');
        this.userInput = document.getElementById('chatbotInput');
        this.sendBtn = document.getElementById('chatbotSendBtn');
        this.resetBtn = document.getElementById('chatbotResetBtn');
        this.requestCountEl = document.getElementById('requestCount');

        if (!this.chatButton || !this.chatWidget) {
            console.error('Chatbot elements not found');
            return;
        }

        this.init();
    }

    init() {
        this.chatButton.addEventListener('click', () => this.toggleChat());
        this.closeBtn.addEventListener('click', () => this.toggleChat());
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        this.resetBtn.addEventListener('click', () => this.resetChat());

        this.userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // ‚ùå X√ìA AUTO-FOCUS - KH√îNG C√íN T·ª∞ ƒê·ªòNG M·ªû B√ÄN PH√çM
        // Kh√¥ng d√πng transitionend ƒë·ªÉ focus n·ªØa

        console.log('Chatbot initialized successfully');
    }

    toggleChat() {
        this.isOpen = !this.isOpen;
        this.chatWidget.classList.toggle('active');

        // ‚úÖ TH√äM/X√ìA CLASS V√ÄO BODY
        if (this.isOpen) {
            document.body.classList.add('chatbot-open');
            this.scrollToBottom();

            // Fix cho iOS: NgƒÉn body scroll
            if (this.isMobile()) {
                document.body.style.overflow = 'hidden';
                document.body.style.position = 'fixed';
                document.body.style.width = '100%';
                document.body.style.top = '0';
            }
        } else {
            document.body.classList.remove('chatbot-open');

            // Kh√¥i ph·ª•c scroll
            if (this.isMobile()) {
                document.body.style.overflow = '';
                document.body.style.position = '';
                document.body.style.width = '';
                document.body.style.top = '';
            }
        }
    }

    isMobile() {
        return window.innerWidth <= 768;
    }

    async sendMessage() {
        const message = this.userInput.value.trim();

        if (!message || this.isTyping) {
            return;
        }

        if (message.length > 500) {
            alert('Tin nh·∫Øn qu√° d√†i! Vui l√≤ng nh·∫≠p t·ªëi ƒëa 500 k√Ω t·ª±.');
            return;
        }

        this.addMessage(message, 'user');
        this.userInput.value = '';
        this.setInputState(false);
        this.showTyping();

        try {
            const response = await fetch('/chatbot/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message })
            });

            const data = await response.json();
            this.hideTyping();

            if (response.ok) {
                this.addMessage(data.response, 'bot');

                if (data.remaining_requests !== undefined) {
                    this.remainingRequests = data.remaining_requests;
                    this.updateRequestCount();
                }
            } else {
                this.addMessage(
                    data.error || data.response || 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i! üòä',
                    'bot'
                );
            }

        } catch (error) {
            console.error('Chatbot error:', error);
            this.hideTyping();
            this.addMessage(
                'Xin l·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng! üîå',
                'bot'
            );
        } finally {
            this.setInputState(true);
            // ‚ùå KH√îNG FOCUS SAU KHI G·ª¨I - TR√ÅNH M·ªû B√ÄN PH√çM
            // this.userInput.focus(); // ƒê√£ x√≥a d√≤ng n√†y
        }
    }

    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chatbot-message ${sender}`;

        const contentDiv = document.createElement('div');
        contentDiv.className = 'chatbot-message-content';
        contentDiv.innerHTML = this.escapeHtml(text).replace(/\n/g, '<br>');

        messageDiv.appendChild(contentDiv);
        this.messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    showTyping() {
        this.isTyping = true;

        const typingDiv = document.createElement('div');
        typingDiv.className = 'chatbot-message bot';
        typingDiv.id = 'chatbotTypingIndicator';

        const typingContent = document.createElement('div');
        typingContent.className = 'chatbot-typing';
        typingContent.innerHTML = '<span></span><span></span><span></span>';

        typingDiv.appendChild(typingContent);
        this.messagesContainer.appendChild(typingDiv);
        this.scrollToBottom();
    }

    hideTyping() {
        this.isTyping = false;
        const typingIndicator = document.getElementById('chatbotTypingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    setInputState(enabled) {
        this.userInput.disabled = !enabled;
        this.sendBtn.disabled = !enabled;
        this.sendBtn.style.opacity = enabled ? '1' : '0.5';
    }

    scrollToBottom() {
        setTimeout(() => {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 100);
    }

    async resetChat() {
        if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën l√†m m·ªõi h·ªôi tho·∫°i? T·∫•t c·∫£ tin nh·∫Øn s·∫Ω b·ªã x√≥a.')) {
            return;
        }

        try {
            const response = await fetch('/chatbot/reset', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (response.ok) {
                const messages = this.messagesContainer.querySelectorAll('.chatbot-message');
                messages.forEach((msg, index) => {
                    if (index > 0) {
                        msg.remove();
                    }
                });

                this.remainingRequests = 20;
                this.updateRequestCount();
                this.addMessage('ƒê√£ l√†m m·ªõi h·ªôi tho·∫°i! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? üòä', 'bot');
            }
        } catch (error) {
            console.error('Reset error:', error);
            alert('Kh√¥ng th·ªÉ l√†m m·ªõi h·ªôi tho·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
        }
    }

    updateRequestCount() {
        if (this.requestCountEl) {
            this.requestCountEl.textContent = `C√≤n ${this.remainingRequests} tin nh·∫Øn`;
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('chatbotButton')) {
        new ChatbotWidget();
    }
});
