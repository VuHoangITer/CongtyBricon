"""
üõçÔ∏è Products Management Routes
- List products
- Add/Edit/Delete products
- H·ªó tr·ª£ th√¥ng tin k·ªπ thu·∫≠t (composition, technical_specs, ...)

üîí Permissions:
- view_products: Xem s·∫£n ph·∫©m
- manage_products: CRUD s·∫£n ph·∫©m
"""

from flask import render_template, request, flash, redirect, url_for
from app import db
from app.models.product import Product
from app.forms.product import ProductForm
from app.decorators import permission_required
from app.admin import admin_bp
from app.admin.utils.helpers import get_image_from_form

# ==================== QU·∫¢N L√ù S·∫¢N PH·∫®M ====================
@admin_bp.route('/products')
@permission_required('view_products')  # ‚úÖ Xem s·∫£n ph·∫©m
def products():
    """Danh s√°ch s·∫£n ph·∫©m"""
    page = request.args.get('page', 1, type=int)
    products = Product.query.order_by(Product.created_at.desc()).paginate(
        page=page, per_page=20, error_out=False
    )
    return render_template('admin/san_pham/products.html', products=products)


@admin_bp.route('/products/add', methods=['GET', 'POST'])
@permission_required('manage_products')
def add_product():
    """Th√™m s·∫£n ph·∫©m m·ªõi v·ªõi th√¥ng tin k·ªπ thu·∫≠t"""
    form = ProductForm()

    if form.validate_on_submit():
        # ========== X·ª¨ L√ù H√åNH ·∫¢NH ==========
        image_path = get_image_from_form(form.image, 'image', folder='products')

        # ========== T·∫†O S·∫¢N PH·∫®M M·ªöI ==========
        product = Product(
            name=form.name.data,
            slug=form.slug.data,
            description=form.description.data,
            price=form.price.data,
            old_price=form.old_price.data,
            category_id=form.category_id.data,
            image=image_path,
            is_featured=form.is_featured.data,
            is_active=form.is_active.data
        )

        # ========== ‚úÖ X·ª¨ L√ù TH√îNG TIN K·ª∏ THU·∫¨T ==========

        # 1. Th√†nh ph·∫ßn (composition) - chuy·ªÉn textarea th√†nh list
        if form.composition.data:
            composition_lines = [line.strip() for line in form.composition.data.split('\n') if line.strip()]
            product.composition = composition_lines  # L∆∞u d·∫°ng JSON array

        # 2. Quy tr√¨nh s·∫£n xu·∫•t (production) - l∆∞u text thu·∫ßn
        product.production = form.production.data if form.production.data else None

        # 3. ·ª®ng d·ª•ng (application) - chuy·ªÉn textarea th√†nh list
        if form.application.data:
            application_lines = [line.strip() for line in form.application.data.split('\n') if line.strip()]
            product.application = application_lines  # L∆∞u d·∫°ng JSON array

        # 4. H·∫°n s·ª≠ d·ª•ng (expiry) - string
        product.expiry = form.expiry.data if form.expiry.data else None

        # 5. Quy c√°ch ƒë√≥ng g√≥i (packaging) - string
        product.packaging = form.packaging.data if form.packaging.data else None

        # 6. M√†u s·∫Øc (colors) - chuy·ªÉn textarea th√†nh list
        if form.colors.data:
            colors_lines = [line.strip() for line in form.colors.data.split('\n') if line.strip()]
            product.colors = colors_lines  # L∆∞u d·∫°ng JSON array

        # 7. Ti√™u chu·∫©n (standards) - string
        product.standards = form.standards.data if form.standards.data else None

        # 8. Th√¥ng s·ªë k·ªπ thu·∫≠t (technical_specs) - parse "key: value" th√†nh dict
        if form.technical_specs.data:
            specs_dict = {}
            for line in form.technical_specs.data.split('\n'):
                line = line.strip()
                if ':' in line:
                    key, value = line.split(':', 1)
                    specs_dict[key.strip()] = value.strip()
            product.technical_specs = specs_dict if specs_dict else None  # L∆∞u d·∫°ng JSON object

        # ========== L∆ØU V√ÄO DATABASE ==========
        try:
            db.session.add(product)
            db.session.commit()
            flash(f'‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m "{product.name}" th√†nh c√¥ng!', 'success')
            return redirect(url_for('admin.products'))
        except Exception as e:
            db.session.rollback()
            flash(f'‚ùå L·ªói l∆∞u s·∫£n ph·∫©m: {str(e)}', 'danger')

    return render_template('admin/san_pham/product_form.html', form=form, title='Th√™m s·∫£n ph·∫©m')


@admin_bp.route('/products/edit/<int:id>', methods=['GET', 'POST'])
@permission_required('manage_products')
def edit_product(id):
    """S·ª≠a s·∫£n ph·∫©m v·ªõi th√¥ng tin k·ªπ thu·∫≠t"""
    product = Product.query.get_or_404(id)
    form = ProductForm(obj=product)

    if form.validate_on_submit():
        # ========== X·ª¨ L√ù H√åNH ·∫¢NH ==========
        new_image = get_image_from_form(form.image, 'image', folder='products')
        if new_image:
            product.image = new_image

        # ========== C·∫¨P NH·∫¨T TH√îNG TIN C∆† B·∫¢N ==========
        product.name = form.name.data
        product.slug = form.slug.data
        product.description = form.description.data
        product.price = form.price.data
        product.old_price = form.old_price.data
        product.category_id = form.category_id.data
        product.is_featured = form.is_featured.data
        product.is_active = form.is_active.data

        # ========== ‚úÖ C·∫¨P NH·∫¨T TH√îNG TIN K·ª∏ THU·∫¨T ==========

        # 1. Th√†nh ph·∫ßn
        if form.composition.data:
            composition_lines = [line.strip() for line in form.composition.data.split('\n') if line.strip()]
            product.composition = composition_lines
        else:
            product.composition = None

        # 2. Quy tr√¨nh s·∫£n xu·∫•t
        product.production = form.production.data if form.production.data else None

        # 3. ·ª®ng d·ª•ng
        if form.application.data:
            application_lines = [line.strip() for line in form.application.data.split('\n') if line.strip()]
            product.application = application_lines
        else:
            product.application = None

        # 4-7. C√°c tr∆∞·ªùng text ƒë∆°n gi·∫£n
        product.expiry = form.expiry.data if form.expiry.data else None
        product.packaging = form.packaging.data if form.packaging.data else None
        product.standards = form.standards.data if form.standards.data else None

        # 8. M√†u s·∫Øc
        if form.colors.data:
            colors_lines = [line.strip() for line in form.colors.data.split('\n') if line.strip()]
            product.colors = colors_lines
        else:
            product.colors = None

        # 9. Th√¥ng s·ªë k·ªπ thu·∫≠t
        if form.technical_specs.data:
            specs_dict = {}
            for line in form.technical_specs.data.split('\n'):
                line = line.strip()
                if ':' in line:
                    key, value = line.split(':', 1)
                    specs_dict[key.strip()] = value.strip()
            product.technical_specs = specs_dict if specs_dict else None
        else:
            product.technical_specs = None

        # ========== L∆ØU V√ÄO DATABASE ==========
        try:
            db.session.commit()
            flash(f'‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m "{product.name}" th√†nh c√¥ng!', 'success')
            return redirect(url_for('admin.products'))
        except Exception as e:
            db.session.rollback()
            flash(f'‚ùå L·ªói c·∫≠p nh·∫≠t: {str(e)}', 'danger')

    # ========== ‚úÖ LOAD D·ªÆ LI·ªÜU KHI EDIT (GET REQUEST) ==========
    if request.method == 'GET':
        # Load th√¥ng tin c∆° b·∫£n (ƒë√£ c√≥ s·∫µn t·ª´ obj=product)

        # Load th√¥ng tin k·ªπ thu·∫≠t - CHUY·ªÇN T·ª™ JSON SANG TEXT

        # Composition (list ‚Üí textarea)
        if product.composition:
            if isinstance(product.composition, list):
                form.composition.data = '\n'.join(product.composition)
            else:
                form.composition.data = product.composition

        # Production (text)
        form.production.data = product.production

        # Application (list ‚Üí textarea)
        if product.application:
            if isinstance(product.application, list):
                form.application.data = '\n'.join(product.application)
            else:
                form.application.data = product.application

        # Expiry, Packaging, Standards (string)
        form.expiry.data = product.expiry
        form.packaging.data = product.packaging
        form.standards.data = product.standards

        # Colors (list ‚Üí textarea)
        if product.colors:
            if isinstance(product.colors, list):
                form.colors.data = '\n'.join(product.colors)
            else:
                form.colors.data = product.colors

        # Technical specs (dict ‚Üí textarea v·ªõi format "key: value")
        if product.technical_specs:
            if isinstance(product.technical_specs, dict):
                specs_lines = [f"{k}: {v}" for k, v in product.technical_specs.items()]
                form.technical_specs.data = '\n'.join(specs_lines)
            else:
                form.technical_specs.data = product.technical_specs

    return render_template('admin/san_pham/product_form.html', form=form, title=f'S·ª≠a s·∫£n ph·∫©m: {product.name}', product=product)


@admin_bp.route('/products/delete/<int:id>')
@permission_required('manage_products')  # ‚úÖ Qu·∫£n l√Ω s·∫£n ph·∫©m
def delete_product(id):
    """X√≥a s·∫£n ph·∫©m"""
    product = Product.query.get_or_404(id)
    db.session.delete(product)
    db.session.commit()

    flash('ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng!', 'success')
    return redirect(url_for('admin.products'))